# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.remove_none_from_dict import remove_none_from_dict
from ..core.request_options import RequestOptions
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.chat_round import ChatRound
from ..types.http_validation_error import HttpValidationError
from .types.chat_chat_post_response import ChatChatPostResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TextClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def chat(
        self,
        *,
        messages: typing.Sequence[ChatRound],
        model: str,
        frequency_penalty: typing.Optional[float] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        presence_penalty: typing.Optional[float] = OMIT,
        seed: typing.Optional[int] = OMIT,
        stop: typing.Optional[typing.Sequence[str]] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        top_k: typing.Optional[int] = OMIT,
        top_p: typing.Optional[float] = OMIT,
        use_search_engine: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatChatPostResponse:
        """
        Parameters
        ----------
        messages : typing.Sequence[ChatRound]

        model : str

        frequency_penalty : typing.Optional[float]

        max_tokens : typing.Optional[int]

        presence_penalty : typing.Optional[float]

        seed : typing.Optional[int]

        stop : typing.Optional[typing.Sequence[str]]

        stream : typing.Optional[bool]

        temperature : typing.Optional[float]

        top_k : typing.Optional[int]

        top_p : typing.Optional[float]

        use_search_engine : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatChatPostResponse
            Newest response from the model.

        Examples
        --------
        from reka import ChatRound
        from reka.client import Reka

        client = Reka(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.text.chat(
            messages=[
                ChatRound(
                    content="content",
                    role="user",
                )
            ],
            model="model",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"messages": messages, "model": model}
        if frequency_penalty is not OMIT:
            _request["frequency_penalty"] = frequency_penalty
        if max_tokens is not OMIT:
            _request["max_tokens"] = max_tokens
        if presence_penalty is not OMIT:
            _request["presence_penalty"] = presence_penalty
        if seed is not OMIT:
            _request["seed"] = seed
        if stop is not OMIT:
            _request["stop"] = stop
        if stream is not OMIT:
            _request["stream"] = stream
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if top_k is not OMIT:
            _request["top_k"] = top_k
        if top_p is not OMIT:
            _request["top_p"] = top_p
        if use_search_engine is not OMIT:
            _request["use_search_engine"] = use_search_engine
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "chat"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ChatChatPostResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTextClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def chat(
        self,
        *,
        messages: typing.Sequence[ChatRound],
        model: str,
        frequency_penalty: typing.Optional[float] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        presence_penalty: typing.Optional[float] = OMIT,
        seed: typing.Optional[int] = OMIT,
        stop: typing.Optional[typing.Sequence[str]] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        top_k: typing.Optional[int] = OMIT,
        top_p: typing.Optional[float] = OMIT,
        use_search_engine: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatChatPostResponse:
        """
        Parameters
        ----------
        messages : typing.Sequence[ChatRound]

        model : str

        frequency_penalty : typing.Optional[float]

        max_tokens : typing.Optional[int]

        presence_penalty : typing.Optional[float]

        seed : typing.Optional[int]

        stop : typing.Optional[typing.Sequence[str]]

        stream : typing.Optional[bool]

        temperature : typing.Optional[float]

        top_k : typing.Optional[int]

        top_p : typing.Optional[float]

        use_search_engine : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatChatPostResponse
            Newest response from the model.

        Examples
        --------
        from reka import ChatRound
        from reka.client import AsyncReka

        client = AsyncReka(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.text.chat(
            messages=[
                ChatRound(
                    content="content",
                    role="user",
                )
            ],
            model="model",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"messages": messages, "model": model}
        if frequency_penalty is not OMIT:
            _request["frequency_penalty"] = frequency_penalty
        if max_tokens is not OMIT:
            _request["max_tokens"] = max_tokens
        if presence_penalty is not OMIT:
            _request["presence_penalty"] = presence_penalty
        if seed is not OMIT:
            _request["seed"] = seed
        if stop is not OMIT:
            _request["stop"] = stop
        if stream is not OMIT:
            _request["stream"] = stream
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if top_k is not OMIT:
            _request["top_k"] = top_k
        if top_p is not OMIT:
            _request["top_p"] = top_p
        if use_search_engine is not OMIT:
            _request["use_search_engine"] = use_search_engine
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "chat"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ChatChatPostResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
